/*
 * generated by Xtext 2.12.0
 */
package at.ac.tuwien.big.tsm.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TsmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cStartsAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartStateCrossReference_3_0 = (CrossReference)cStartAssignment_3.eContents().get(0);
		private final RuleCall cStartStateQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cStartStateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsTransitionParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StateMachine:
		//	'state-machine' name=ID 'starts-at' start=[State|QualifiedName] '{'
		//	states+=State*
		//	transitions+=Transition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state-machine' name=ID 'starts-at' start=[State|QualifiedName] '{' states+=State* transitions+=Transition* '}'
		public Group getGroup() { return cGroup; }
		
		//'state-machine'
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'starts-at'
		public Keyword getStartsAtKeyword_2() { return cStartsAtKeyword_2; }
		
		//start=[State|QualifiedName]
		public Assignment getStartAssignment_3() { return cStartAssignment_3; }
		
		//[State|QualifiedName]
		public CrossReference getStartStateCrossReference_3_0() { return cStartStateCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getStartStateQualifiedNameParserRuleCall_3_0_1() { return cStartStateQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_6_0() { return cTransitionsTransitionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIncomingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIncomingTransitionCrossReference_3_0 = (CrossReference)cIncomingAssignment_3.eContents().get(0);
		private final RuleCall cIncomingTransitionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cIncomingTransitionCrossReference_3_0.eContents().get(1);
		private final Keyword cOutKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutgoingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutgoingTransitionCrossReference_5_0 = (CrossReference)cOutgoingAssignment_5.eContents().get(0);
		private final RuleCall cOutgoingTransitionQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cOutgoingTransitionCrossReference_5_0.eContents().get(1);
		
		//State:
		//	'state' name=ID
		//	'in' incoming+=[Transition|QualifiedName]
		//	'out' outgoing+=[Transition|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID 'in' incoming+=[Transition|QualifiedName] 'out' outgoing+=[Transition|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//incoming+=[Transition|QualifiedName]
		public Assignment getIncomingAssignment_3() { return cIncomingAssignment_3; }
		
		//[Transition|QualifiedName]
		public CrossReference getIncomingTransitionCrossReference_3_0() { return cIncomingTransitionCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getIncomingTransitionQualifiedNameParserRuleCall_3_0_1() { return cIncomingTransitionQualifiedNameParserRuleCall_3_0_1; }
		
		//'out'
		public Keyword getOutKeyword_4() { return cOutKeyword_4; }
		
		//outgoing+=[Transition|QualifiedName]
		public Assignment getOutgoingAssignment_5() { return cOutgoingAssignment_5; }
		
		//[Transition|QualifiedName]
		public CrossReference getOutgoingTransitionCrossReference_5_0() { return cOutgoingTransitionCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getOutgoingTransitionQualifiedNameParserRuleCall_5_0_1() { return cOutgoingTransitionQualifiedNameParserRuleCall_5_0_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTimerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimerTimeEventParserRuleCall_2_0 = (RuleCall)cTimerAssignment_2.eContents().get(0);
		private final Keyword cSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceStateCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourceStateQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cSourceStateCrossReference_5_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetStateCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetStateQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cTargetStateCrossReference_7_0.eContents().get(1);
		
		//Transition:
		//	'transition' name=ID timer=TimeEvent 'sec' ':'
		//	source=[State|QualifiedName] '>' target=[State|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ID timer=TimeEvent 'sec' ':' source=[State|QualifiedName] '>' target=[State|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//timer=TimeEvent
		public Assignment getTimerAssignment_2() { return cTimerAssignment_2; }
		
		//TimeEvent
		public RuleCall getTimerTimeEventParserRuleCall_2_0() { return cTimerTimeEventParserRuleCall_2_0; }
		
		//'sec'
		public Keyword getSecKeyword_3() { return cSecKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//source=[State|QualifiedName]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[State|QualifiedName]
		public CrossReference getSourceStateCrossReference_5_0() { return cSourceStateCrossReference_5_0; }
		
		//QualifiedName
		public RuleCall getSourceStateQualifiedNameParserRuleCall_5_0_1() { return cSourceStateQualifiedNameParserRuleCall_5_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//target=[State|QualifiedName]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//[State|QualifiedName]
		public CrossReference getTargetStateCrossReference_7_0() { return cTargetStateCrossReference_7_0; }
		
		//QualifiedName
		public RuleCall getTargetStateQualifiedNameParserRuleCall_7_0_1() { return cTargetStateQualifiedNameParserRuleCall_7_0_1; }
	}
	public class TimeEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.TimeEvent");
		private final Assignment cTimeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeEIntParserRuleCall_0 = (RuleCall)cTimeAssignment.eContents().get(0);
		
		//TimeEvent:
		//	time=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//time=EInt
		public Assignment getTimeAssignment() { return cTimeAssignment; }
		
		//EInt
		public RuleCall getTimeEIntParserRuleCall_0() { return cTimeEIntParserRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (=> '.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> '.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> '.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "at.ac.tuwien.big.tsm.xtext.Tsm.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final TimeEventElements pTimeEvent;
	private final QualifiedNameElements pQualifiedName;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TsmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pTimeEvent = new TimeEventElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.tsm.xtext.Tsm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	'state-machine' name=ID 'starts-at' start=[State|QualifiedName] '{'
	//	states+=State*
	//	transitions+=Transition*
	//	'}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//State:
	//	'state' name=ID
	//	'in' incoming+=[Transition|QualifiedName]
	//	'out' outgoing+=[Transition|QualifiedName];
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'transition' name=ID timer=TimeEvent 'sec' ':'
	//	source=[State|QualifiedName] '>' target=[State|QualifiedName];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//TimeEvent:
	//	time=EInt;
	public TimeEventElements getTimeEventAccess() {
		return pTimeEvent;
	}
	
	public ParserRule getTimeEventRule() {
		return getTimeEventAccess().getRule();
	}
	
	//QualifiedName:
	//	ID (=> '.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
