/*
 * generated by Xtext 2.12.0
 */
package at.ac.tuwien.big.tsm.xtext.ide.contentassist.antlr;

import at.ac.tuwien.big.tsm.xtext.ide.contentassist.antlr.internal.InternalTsmParser;
import at.ac.tuwien.big.tsm.xtext.services.TsmGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TsmParser extends AbstractContentAssistParser {

	@Inject
	private TsmGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTsmParser createParser() {
		InternalTsmParser result = new InternalTsmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_1(), "rule__StateMachine__NameAssignment_1");
					put(grammarAccess.getStateMachineAccess().getStartAssignment_3(), "rule__StateMachine__StartAssignment_3");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_5(), "rule__StateMachine__StatesAssignment_5");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_6(), "rule__StateMachine__TransitionsAssignment_6");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getIncomingAssignment_3(), "rule__State__IncomingAssignment_3");
					put(grammarAccess.getStateAccess().getOutgoingAssignment_5(), "rule__State__OutgoingAssignment_5");
					put(grammarAccess.getTransitionAccess().getNameAssignment_1(), "rule__Transition__NameAssignment_1");
					put(grammarAccess.getTransitionAccess().getTimerAssignment_2(), "rule__Transition__TimerAssignment_2");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_5(), "rule__Transition__SourceAssignment_5");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_7(), "rule__Transition__TargetAssignment_7");
					put(grammarAccess.getTimeEventAccess().getTimeAssignment(), "rule__TimeEvent__TimeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TsmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TsmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
